configfile : "config/config.yaml"

def get_all_samples_counts(wildcards):
	existing_samples = glob_wildcards(os.path.join(config["paths"]["data_folder"], "sample{id,[^_]+}_R1_001.fastq.gz")).id
	res = expand(
		config["paths"]["out_dir"] + "/{current_sample}_"+ config["org"] +"/counts/counts.txt",
		current_sample = existing_samples
	) 	# featureCounts rule
	return res 
rule all:
	input:
		counts = get_all_samples_counts,
		multiqc = config["paths"]["out_dir"] + "/qc_logs/multiqc_report.html"


def get_files_for_multiqc(wildcards):
	existing_samples = glob_wildcards(os.path.join(config["paths"]["data_folder"], "sample{id,[^_]+}_R1_001.fastq.gz")).id
	#gw = glob_wildcards(os.path.join(config["paths"]["data_folder"], "{sample}_R1_001.fastq.gz"))
	#infer_files = expand("{out_path}/qc_logs/rseqc/{sample}_" + "_".join(config["orgs"]) + "/mouse_infer_experiment.txt",
	#	out_path = wildcards.out_path,
	#	sample = gw.sample
	#	)
	infer_files = expand("{out_path}/qc_logs/rseqc/{sample}_" + config["orgs"] + "/infer_experiment.txt",
	       out_path = wildcards.out_path,
	       sample = existing_samples
               )
	fastqc_files = expand("{out_path}/qc_logs/fastqc/{sample}_R{n}_001_fastqc.html",
		out_path = wildcards.out_path,
		sample=existing_samples,
		n=[1,2])
	cov_genes = expand("{out_path}/qc_logs/rseqc/{sample}_"+ config["org"] +"/geneBodyCoverage.txt",
           out_path = wildcards.out_path,
           sample=existing_samples)
	return infer_files + fastqc_files + cov_genes
rule run_multiqc:
	input:
		get_files_for_multiqc#,
		#gene_conv = rules.geneBody_coverage.output.gene_covr
	output:
		report = "{out_path}/qc_logs/multiqc_report.html"
	threads: workflow.cores*0.3
	conda: "envs/himer_align.yaml"
	shell:
		"multiqc {wildcards.out_path}/qc_logs -o {wildcards.out_path}/qc_logs"


include: 'rules/fasq_process.smk'
include: 'rules/align.smk'
include: 'rules/count_features.smk'
include: 'rules/QC_files.smk'







